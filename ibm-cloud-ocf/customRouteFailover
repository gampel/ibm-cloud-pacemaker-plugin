#!/bin/sh
#
# Resource script for ibm_vpc_cr-failover umm script
#
# Description:  Manages ibm_vpc_cr-failover as an OCF resource in
#               an High Availability setup.
#
# IBM Cloud VPC Custom Route VIP failover OCF script's Author: gampel
# License: GNU General Public License (GPL)
#
# Copyright (c) 2024 Eran Gampel
#	usage: $0 {start|stop|monitor|validate-all|meta-data}
#
#	The "start" arg starts ibm_vpc_cr-failover.
#
#	The "stop" arg stops it.
#
# OCF parameters:
# OCF_RESKEY_script
# OCF_RESKEY_startargs
# OCF_RESKEY_stopargs
# OCF_RESKEY_startandstop
# OCF_RESKEY_args
# OCF_RESKEY_statedir
# OCF_RESKEY_alwaysrun
#
##########################################################################
# Initialization:
: ${OCF_FUNCTIONS:="${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs"}
. "${OCF_FUNCTIONS}"

USAGE="Usage: $0 {start|stop|monitor|validate-all|meta-data}";

##########################################################################

usage()
{
	echo $USAGE >&2
}

meta_data() {
  cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="foobar" version="1.0">
  <version>1.0</version>
  <longdesc lang="en">
Custom Route failover ocf  via the IBM Cloud API</longdesc>
  <shortdesc lang="en">VIP HA using Custom route IBM Cloud API</shortdesc>
<parameters>
<parameter name="auth_type">
<longdesc lang="en">
Authentication type "key" for AccessKey
</longdesc>
<shortdesc lang="en">Authentication type</shortdesc>
<content type="string" default="${OCF_IBM_auth_type_default}" />
</parameter>
<parameter name="api_key" unique="1">
<longdesc lang="en">
IBM Cloud APi key
</longdesc>
<shortdesc lang="en">API key</shortdesc>
<content type="string" default="" />
</parameter>
<parameter name="vpc_url" unique="1">
<longdesc lang="en">
IBM Cloud Public VPC URL for your region or a VPE URL for IBM Cloud VPC 
</longdesc>
<shortdesc lang="en">API key</shortdesc>
<content type="string" default="" />
</parameter>
<parameter name="ext_ip_1" unique="1" required="1">
<longdesc lang="en">
Ip address for instace 1 
</longdesc>
<shortdesc lang="en">predefined private ip address for ec2 instance</shortdesc>
<content type="string" default="" />
</parameter>
<parameter name="ext_ip_2" unique="1" required="1">
<longdesc lang="en">
Ip address for instace 2 
</longdesc>
<shortdesc lang="en">predefined private ip address for ec2 instance</shortdesc>
<content type="string" default="" />
</parameter>

</parameters>
  <actions>
    <action name="start"        timeout="20" />
    <action name="stop"         timeout="20" />
    <action name="monitor"      timeout="20"
                                interval="10" depth="0" />
    <action name="meta-data"    timeout="5" />
  </actions>
</resource-agent>
END
}


get_params()
{
	if [ -n "$OCF_RESKEY_api_key" ]; then
		export API_KEY=${OCF_RESKEY_api_key}
	fi
	if [ -n "$OCF_RESKEY_vpc_url" ]; then
		export VPC_URL=${OCF_RESKEY_vpc_url}
	fi
	if [ -n "$OCF_RESKEY_ext_ip_1" ]; then
		export EXT_IP_1=${OCF_RESKEY_ext_ip_1}
	fi
	if [ -n "$OCF_RESKEY_ext_ip_2" ]; then
		export EXT_IP_2=${OCF_RESKEY_ext_ip_2}
	fi
	OCF_IBM_auth_type_default="key"
	instance_identity_token=$(curl -s -X PUT "http://169.254.169.254/instance_identity/v1/token?version=2022-03-08" -H "Metadata-Flavor: ibm" -d '{ "expires_in": 3600 }' | jq -r .access_token)
	#export instance_primary_ip=$(curl -s -X GET "http://169.254.169.254/metadata/v1/instance/network_interfaces?version=2022-05-24" -H "Authorization: Bearer $instance_identity_token" | jq -r .network_interfaces[0].primary_ipv4_address)
	#FIP_IP=$(curl -s -X GET "http://169.254.169.254/metadata/v1/instance/network_interfaces?version=2022-05-24" -H "Authorization: Bearer $instance_identity_token" | jq -r .network_interfaces[0].floating_ips[0].address)
	export VPC_ID=$(curl -s -X GET "http://169.254.169.254/metadata/v1/instance?version=2022-05-24" -H "Authorization: Bearer $instance_identity_token" | jq -r .vpc.id) 
	export VSI_LOCAL_AZ=$(curl -s -X GET "http://169.254.169.254/metadata/v1/instance?version=2022-05-24" -H "Authorization: Bearer $instance_identity_token" | jq -r .zone.name) 


}

ibm_vpc_cr_monitor()
{
  active_ip=$(ibm_cloud_pacemaker_fail_over.py ROUTE GET)
  cmd="ip a"
  ocf_log info "executing command: $cmd active_ip: $active_ip"
  RESULT=$($cmd | grep "$active_ip") 
  if [ -z "$RESULT" ]; then
  	  ocf_log info "Passive return $OCF_NOT_RUNNING"
  	  exit $OCF_NOT_RUNNING
  fi
  ocf_log info "Active return $OCF_SUCCESS"
  exit $OCF_SUCCESS

}

ibm_vpc_cr_start()
{
	ocf_log info ">>>>>>>>>> ibm_vpc_cr_start: :$VSI_LOCAL_AZ:  $OCF_SUCCESS"
  	ibm_cloud_pacemaker_fail_over.py ROUTE SET
	exit $OCF_SUCCESS
}


ibm_vpc_cr_stop()
{
	ocf_log info ">>>>>>>>>> ibm_vpc_cr_stop: :$FIP_IP: $OCF_SUCCESS"
	exit $OCF_SUCCESS
}

ibm_vpc_cr_validate_all()
{
	# Is the state directory writable? 
	state_dir=`dirname "$OCF_RESKEY_state"`
	touch "$state_dir/$$"
	if [ $? != 0 ]; then
		return $OCF_ERR_ARGS
	fi
	rm "$state_dir/$$"

	return $OCF_SUCCESS
}

: ${OCF_RESKEY_state=${OCF_RESKEY_statedir:-$HA_RSCTMP}/ibm_vpc_cr-failover-${OCF_RESOURCE_INSTANCE}.state}

#
# Main
#

if [ $# -ne 1 ]; then
	usage
	exit $OCF_ERR_ARGS
fi

case $__OCF_ACTION in
	start)	get_params
		ibm_vpc_cr_start
		;;

	stop)	get_params
		ibm_vpc_cr_stop
		;;

	monitor)get_params
		ibm_vpc_cr_monitor
		;;

	validate-all)	get_params
			ibm_vpc_cr_validate_all
			;;

	meta-data)	meta_data
		        exit $OCF_SUCCESS
			;;

	usage)	usage
		exit $OCF_SUCCESS
		;;

	*)	usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac

